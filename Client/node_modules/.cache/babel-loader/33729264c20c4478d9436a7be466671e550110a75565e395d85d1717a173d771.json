{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\solwo\\\\Desktop\\\\Coding\\\\TravellerProject\\\\Client\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport { useLoadScript, GoogleMap, MarkerF } from \"@react-google-maps/api\";\nimport { useCallback, useMemo, useState, useRef } from \"react\";\nimport { useQuery } from \"react-query\";\nimport \"./styles/map.css\";\nimport Places from \"./Places\";\nimport readMarkerRequest from \"../api/readMarkerRequest\";\nimport { library } from \"../config\";\nimport addMarkerRequest from \"../api/addMarkerRequest\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport PlaceList from \"./PlaceList\";\nimport deleteMarkerRequest from \"../api/deleteMarkerRequest\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Map() {\n  _s();\n  const [location, setLocation] = useState([]);\n  const mapRef = useRef(3);\n  const {\n    isLoaded\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_API_KEY,\n    libraries: library\n  });\n  const list = [];\n  const {\n    isLoading,\n    data: markers\n  } = useQuery('markers', readMarkerRequest, {\n    onSuccess: markers => markers.map(marker => updateCountryList(marker.country))\n  });\n  const updateCountryList = newCountry => {\n    let tempList = countryList;\n    tempList.push(newCountry);\n    setCountryList(tempList);\n  };\n  const center = useMemo(() => ({\n    lat: 24.52043,\n    lng: 15.856743\n  }), []);\n  const options = useMemo(() => ({\n    disableDefaultUI: true,\n    clickableIcons: false,\n    mapId: \"5c60bef575d03ff\"\n  }), []);\n  const queryClient = useQueryClient();\n  const {\n    mutate: addMarker\n  } = useMutation(newMarker => addMarkerRequest(newMarker), {\n    onSettled: () => {\n      queryClient.invalidateQueries(\"markers\");\n    }\n  });\n  const onLoad = useCallback(map => mapRef.current = map, []);\n  let [countryList, setCountryList] = useState([]);\n  const deleteCountry = country => {\n    const markerMatch = markers.filter(marker => marker.country == country);\n    deleteMarkerRequest(markerMatch);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !isLoaded && isLoading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"addingPanel\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Add A Destination\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Places, {\n            setLocation: (position, country) => {\n              var _mapRef$current, _mapRef$current2;\n              setLocation(position);\n              (_mapRef$current = mapRef.current) === null || _mapRef$current === void 0 ? void 0 : _mapRef$current.panTo(position);\n              (_mapRef$current2 = mapRef.current) === null || _mapRef$current2 === void 0 ? void 0 : _mapRef$current2.setZoom(4);\n              let newMarker = {\n                latLngLit: position,\n                markerCountry: country\n              };\n              addMarker(newMarker);\n              setCountryList([]);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countriesPanel\",\n          children: /*#__PURE__*/_jsxDEV(PlaceList, {\n            countryList: countryList,\n            deleteCountry: deleteCountry\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerClassName: \"map-container\",\n        center: center,\n        zoom: 3,\n        options: options,\n        onLoad: onLoad,\n        children: !isLoading && markers.map(marker => /*#__PURE__*/_jsxDEV(MarkerF, {\n          position: {\n            lat: marker.latitude,\n            lng: marker.longitude\n          }\n        }, marker._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(Map, \"5kZqPq690BVSvCsjSyZLnIkP70M=\", false, function () {\n  return [useLoadScript, useQuery, useQueryClient, useMutation];\n});\n_c = Map;\n;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["useLoadScript","GoogleMap","MarkerF","useCallback","useMemo","useState","useRef","useQuery","Places","readMarkerRequest","library","addMarkerRequest","useMutation","useQueryClient","PlaceList","deleteMarkerRequest","jsxDEV","_jsxDEV","Map","_s","location","setLocation","mapRef","isLoaded","googleMapsApiKey","process","env","REACT_APP_GOOGLE_API_KEY","libraries","list","isLoading","data","markers","onSuccess","map","marker","updateCountryList","country","newCountry","tempList","countryList","push","setCountryList","center","lat","lng","options","disableDefaultUI","clickableIcons","mapId","queryClient","mutate","addMarker","newMarker","onSettled","invalidateQueries","onLoad","current","deleteCountry","markerMatch","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","className","position","_mapRef$current","_mapRef$current2","panTo","setZoom","latLngLit","markerCountry","mapContainerClassName","zoom","latitude","longitude","_id","_c","$RefreshReg$"],"sources":["C:/Users/solwo/Desktop/Coding/TravellerProject/Client/src/components/Map.js"],"sourcesContent":["import {useLoadScript, GoogleMap, MarkerF} from \"@react-google-maps/api\";\r\nimport { useCallback, useMemo, useState, useRef } from \"react\";\r\nimport {useQuery} from \"react-query\";\r\nimport \"./styles/map.css\"\r\nimport Places from \"./Places\"\r\nimport readMarkerRequest from \"../api/readMarkerRequest\";\r\nimport { library } from \"../config\";\r\nimport addMarkerRequest from \"../api/addMarkerRequest\";\r\nimport {useMutation, useQueryClient} from \"react-query\";\r\nimport PlaceList from \"./PlaceList\";\r\nimport deleteMarkerRequest from \"../api/deleteMarkerRequest\";\r\n\r\n\r\nexport default function Map() {\r\n  const [location, setLocation] = useState([]);\r\n  const mapRef = useRef(3);\r\n  const { isLoaded } = useLoadScript({\r\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_API_KEY,\r\n    libraries: library,\r\n  });\r\n\r\n  const list = []\r\n  const {isLoading, data: markers} = useQuery(\r\n    'markers', \r\n    readMarkerRequest, {\r\n      onSuccess: (markers)=> markers.map((marker)=>(\r\n        updateCountryList(marker.country)\r\n      ))\r\n    }\r\n    )\r\n\r\n  const updateCountryList = (newCountry) => {\r\n    let tempList = countryList\r\n    tempList.push(newCountry)\r\n    setCountryList(tempList)\r\n  }\r\n\r\n  const center = useMemo(() => ({ lat: 24.52043, lng: 15.856743 }), []);\r\n  const options = useMemo(()=> ({\r\n    disableDefaultUI: true,\r\n    clickableIcons: false,\r\n    mapId: \"5c60bef575d03ff\",})\r\n    ,[])\r\n\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const {mutate: addMarker} = useMutation(\r\n      (newMarker)=>addMarkerRequest(newMarker),\r\n      {\r\n        onSettled: ()=>{\r\n          queryClient.invalidateQueries(\"markers\")\r\n        }\r\n      }\r\n  )\r\n  const onLoad = useCallback((map)=>(mapRef.current = map), []);\r\n  let [countryList, setCountryList] = useState([])\r\n\r\n  const deleteCountry = (country) => {\r\n\r\n    const markerMatch = markers.filter((marker)=>marker.country==country)\r\n    deleteMarkerRequest(markerMatch)\r\n  }\r\n  \r\n  return (\r\n    <div>\r\n      {!isLoaded && isLoading ? (\r\n        <h1>Loading...</h1>\r\n      ) : (\r\n        <div className=\"container\">\r\n          <div className=\"control\">\r\n            <div className=\"addingPanel\">\r\n            <h1>Add A Destination</h1>\r\n            <Places setLocation={(position, country)=>{\r\n              setLocation(position);\r\n              mapRef.current?.panTo(position);\r\n              mapRef.current?.setZoom(4);\r\n              let newMarker = {latLngLit: position, markerCountry:country}\r\n              addMarker(newMarker)\r\n              setCountryList([])\r\n            }}/>\r\n          </div>\r\n          <div className=\"countriesPanel\">\r\n            <PlaceList countryList = {countryList} deleteCountry={deleteCountry}/>\r\n          </div>\r\n\r\n\r\n        </div>\r\n        <GoogleMap\r\n          mapContainerClassName=\"map-container\"\r\n          center={center}\r\n          zoom={3}\r\n          options={options}\r\n          onLoad={onLoad}\r\n          > \r\n            {!isLoading && markers.map((marker)=>(\r\n              <MarkerF position={{lat: marker.latitude,lng: marker.longitude}} key={marker._id}/>\r\n              \r\n            ))}\r\n        </GoogleMap>\r\n\r\n        </div>\r\n        \r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}